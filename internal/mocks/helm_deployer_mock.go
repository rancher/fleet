// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rancher/fleet/internal/cmd/agent/deployer/cleanup (interfaces: HelmDeployer)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=../../../../mocks/helm_deployer_mock.go -package=mocks github.com/rancher/fleet/internal/cmd/agent/deployer/cleanup HelmDeployer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	helmdeployer "github.com/rancher/fleet/internal/helmdeployer"
	gomock "go.uber.org/mock/gomock"
	action "helm.sh/helm/v3/pkg/action"
)

// MockHelmDeployer is a mock of HelmDeployer interface.
type MockHelmDeployer struct {
	ctrl     *gomock.Controller
	recorder *MockHelmDeployerMockRecorder
	isgomock struct{}
}

// MockHelmDeployerMockRecorder is the mock recorder for MockHelmDeployer.
type MockHelmDeployerMockRecorder struct {
	mock *MockHelmDeployer
}

// NewMockHelmDeployer creates a new mock instance.
func NewMockHelmDeployer(ctrl *gomock.Controller) *MockHelmDeployer {
	mock := &MockHelmDeployer{ctrl: ctrl}
	mock.recorder = &MockHelmDeployerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelmDeployer) EXPECT() *MockHelmDeployerMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockHelmDeployer) Delete(ctx context.Context, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockHelmDeployerMockRecorder) Delete(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockHelmDeployer)(nil).Delete), ctx, name)
}

// DeleteRelease mocks base method.
func (m *MockHelmDeployer) DeleteRelease(ctx context.Context, deployed helmdeployer.DeployedBundle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRelease", ctx, deployed)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRelease indicates an expected call of DeleteRelease.
func (mr *MockHelmDeployerMockRecorder) DeleteRelease(ctx, deployed any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRelease", reflect.TypeOf((*MockHelmDeployer)(nil).DeleteRelease), ctx, deployed)
}

// ListDeployments mocks base method.
func (m *MockHelmDeployer) ListDeployments(list helmdeployer.ListAction) ([]helmdeployer.DeployedBundle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDeployments", list)
	ret0, _ := ret[0].([]helmdeployer.DeployedBundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDeployments indicates an expected call of ListDeployments.
func (mr *MockHelmDeployerMockRecorder) ListDeployments(list any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDeployments", reflect.TypeOf((*MockHelmDeployer)(nil).ListDeployments), list)
}

// NewListAction mocks base method.
func (m *MockHelmDeployer) NewListAction() *action.List {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewListAction")
	ret0, _ := ret[0].(*action.List)
	return ret0
}

// NewListAction indicates an expected call of NewListAction.
func (mr *MockHelmDeployerMockRecorder) NewListAction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewListAction", reflect.TypeOf((*MockHelmDeployer)(nil).NewListAction))
}
