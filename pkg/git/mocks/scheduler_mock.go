// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/reugn/go-quartz/quartz (interfaces: Scheduler)

// Package mocks is a generated GoMock package.
package mocks

import (
        context "context"
        gomock "go.uber.org/mock/gomock"
        quartz "github.com/reugn/go-quartz/quartz"
        reflect "reflect"
)

// MockScheduler is a mock of Scheduler interface.
type MockScheduler struct {
        ctrl     *gomock.Controller
        recorder *MockSchedulerMockRecorder
}

// MockSchedulerMockRecorder is the mock recorder for MockScheduler.
type MockSchedulerMockRecorder struct {
        mock *MockScheduler
}

// NewMockScheduler creates a new mock instance.
func NewMockScheduler(ctrl *gomock.Controller) *MockScheduler {
        mock := &MockScheduler{ctrl: ctrl}
        mock.recorder = &MockSchedulerMockRecorder{mock}
        return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScheduler) EXPECT() *MockSchedulerMockRecorder {
        return m.recorder
}

// Clear mocks base method.
func (m *MockScheduler) Clear() error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "Clear")
        ret0, _ := ret[0].(error)
        return ret0
}

// Clear indicates an expected call of Clear.
func (mr *MockSchedulerMockRecorder) Clear() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockScheduler)(nil).Clear))
}

// DeleteJob mocks base method.
func (m *MockScheduler) DeleteJob(arg0 *quartz.JobKey) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "DeleteJob", arg0)
        ret0, _ := ret[0].(error)
        return ret0
}

// DeleteJob indicates an expected call of DeleteJob.
func (mr *MockSchedulerMockRecorder) DeleteJob(arg0 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJob", reflect.TypeOf((*MockScheduler)(nil).DeleteJob), arg0)
}

// GetJobKeys mocks base method.
func (m *MockScheduler) GetJobKeys(arg0 ...quartz.Matcher[quartz.ScheduledJob]) []*quartz.JobKey {
        m.ctrl.T.Helper()
        varargs := []interface{}{}
        for _, a := range arg0 {
                varargs = append(varargs, a)
        }
        ret := m.ctrl.Call(m, "GetJobKeys", varargs...)
        ret0, _ := ret[0].([]*quartz.JobKey)
        return ret0
}

// GetJobKeys indicates an expected call of GetJobKeys.
func (mr *MockSchedulerMockRecorder) GetJobKeys(arg0 ...interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetJobKeys", reflect.TypeOf((*MockScheduler)(nil).GetJobKeys), arg0...)
}

// GetScheduledJob mocks base method.
func (m *MockScheduler) GetScheduledJob(arg0 *quartz.JobKey) (quartz.ScheduledJob, error) {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "GetScheduledJob", arg0)
        ret0, _ := ret[0].(quartz.ScheduledJob)
        ret1, _ := ret[1].(error)
        return ret0, ret1
}

// GetScheduledJob indicates an expected call of GetScheduledJob.
func (mr *MockSchedulerMockRecorder) GetScheduledJob(arg0 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScheduledJob", reflect.TypeOf((*MockScheduler)(nil).GetScheduledJob), arg0)
}

// IsStarted mocks base method.
func (m *MockScheduler) IsStarted() bool {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "IsStarted")
        ret0, _ := ret[0].(bool)
        return ret0
}

// IsStarted indicates an expected call of IsStarted.
func (mr *MockSchedulerMockRecorder) IsStarted() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsStarted", reflect.TypeOf((*MockScheduler)(nil).IsStarted))
}

// PauseJob mocks base method.
func (m *MockScheduler) PauseJob(arg0 *quartz.JobKey) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "PauseJob", arg0)
        ret0, _ := ret[0].(error)
        return ret0
}

// PauseJob indicates an expected call of PauseJob.
func (mr *MockSchedulerMockRecorder) PauseJob(arg0 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PauseJob", reflect.TypeOf((*MockScheduler)(nil).PauseJob), arg0)
}

// ResumeJob mocks base method.
func (m *MockScheduler) ResumeJob(arg0 *quartz.JobKey) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "ResumeJob", arg0)
        ret0, _ := ret[0].(error)
        return ret0
}

// ResumeJob indicates an expected call of ResumeJob.
func (mr *MockSchedulerMockRecorder) ResumeJob(arg0 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResumeJob", reflect.TypeOf((*MockScheduler)(nil).ResumeJob), arg0)
}

// ScheduleJob mocks base method.
func (m *MockScheduler) ScheduleJob(arg0 *quartz.JobDetail, arg1 quartz.Trigger) error {
        m.ctrl.T.Helper()
        ret := m.ctrl.Call(m, "ScheduleJob", arg0, arg1)
        ret0, _ := ret[0].(error)
        return ret0
}

// ScheduleJob indicates an expected call of ScheduleJob.
func (mr *MockSchedulerMockRecorder) ScheduleJob(arg0, arg1 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleJob", reflect.TypeOf((*MockScheduler)(nil).ScheduleJob), arg0, arg1)
}

// Start mocks base method.
func (m *MockScheduler) Start(arg0 context.Context) {
        m.ctrl.T.Helper()
        m.ctrl.Call(m, "Start", arg0)
}

// Start indicates an expected call of Start.
func (mr *MockSchedulerMockRecorder) Start(arg0 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockScheduler)(nil).Start), arg0)
}

// Stop mocks base method.
func (m *MockScheduler) Stop() {
        m.ctrl.T.Helper()
        m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockSchedulerMockRecorder) Stop() *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockScheduler)(nil).Stop))
}

// Wait mocks base method.
func (m *MockScheduler) Wait(arg0 context.Context) {
        m.ctrl.T.Helper()
        m.ctrl.Call(m, "Wait", arg0)
}

// Wait indicates an expected call of Wait.
func (mr *MockSchedulerMockRecorder) Wait(arg0 interface{}) *gomock.Call {
        mr.mock.ctrl.T.Helper()
        return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockScheduler)(nil).Wait), arg0)
}
