/*
Copyright 2020 Rancher Labs, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1

import (
	"context"
	"time"

	v1 "github.com/rancher/gitjobs/pkg/apis/gitops.cattle.io/v1"
	clientset "github.com/rancher/gitjobs/pkg/generated/clientset/versioned/typed/gitops.cattle.io/v1"
	informers "github.com/rancher/gitjobs/pkg/generated/informers/externalversions/gitops.cattle.io/v1"
	listers "github.com/rancher/gitjobs/pkg/generated/listers/gitops.cattle.io/v1"
	"github.com/rancher/wrangler/pkg/apply"
	"github.com/rancher/wrangler/pkg/condition"
	"github.com/rancher/wrangler/pkg/generic"
	"github.com/rancher/wrangler/pkg/kv"
	"k8s.io/apimachinery/pkg/api/equality"
	"k8s.io/apimachinery/pkg/api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	utilruntime "k8s.io/apimachinery/pkg/util/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/tools/cache"
)

type GitJobHandler func(string, *v1.GitJob) (*v1.GitJob, error)

type GitJobController interface {
	generic.ControllerMeta
	GitJobClient

	OnChange(ctx context.Context, name string, sync GitJobHandler)
	OnRemove(ctx context.Context, name string, sync GitJobHandler)
	Enqueue(namespace, name string)
	EnqueueAfter(namespace, name string, duration time.Duration)

	Cache() GitJobCache
}

type GitJobClient interface {
	Create(*v1.GitJob) (*v1.GitJob, error)
	Update(*v1.GitJob) (*v1.GitJob, error)
	UpdateStatus(*v1.GitJob) (*v1.GitJob, error)
	Delete(namespace, name string, options *metav1.DeleteOptions) error
	Get(namespace, name string, options metav1.GetOptions) (*v1.GitJob, error)
	List(namespace string, opts metav1.ListOptions) (*v1.GitJobList, error)
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.GitJob, err error)
}

type GitJobCache interface {
	Get(namespace, name string) (*v1.GitJob, error)
	List(namespace string, selector labels.Selector) ([]*v1.GitJob, error)

	AddIndexer(indexName string, indexer GitJobIndexer)
	GetByIndex(indexName, key string) ([]*v1.GitJob, error)
}

type GitJobIndexer func(obj *v1.GitJob) ([]string, error)

type gitJobController struct {
	controllerManager *generic.ControllerManager
	clientGetter      clientset.GitJobsGetter
	informer          informers.GitJobInformer
	gvk               schema.GroupVersionKind
}

func NewGitJobController(gvk schema.GroupVersionKind, controllerManager *generic.ControllerManager, clientGetter clientset.GitJobsGetter, informer informers.GitJobInformer) GitJobController {
	return &gitJobController{
		controllerManager: controllerManager,
		clientGetter:      clientGetter,
		informer:          informer,
		gvk:               gvk,
	}
}

func FromGitJobHandlerToHandler(sync GitJobHandler) generic.Handler {
	return func(key string, obj runtime.Object) (ret runtime.Object, err error) {
		var v *v1.GitJob
		if obj == nil {
			v, err = sync(key, nil)
		} else {
			v, err = sync(key, obj.(*v1.GitJob))
		}
		if v == nil {
			return nil, err
		}
		return v, err
	}
}

func (c *gitJobController) Updater() generic.Updater {
	return func(obj runtime.Object) (runtime.Object, error) {
		newObj, err := c.Update(obj.(*v1.GitJob))
		if newObj == nil {
			return nil, err
		}
		return newObj, err
	}
}

func UpdateGitJobDeepCopyOnChange(client GitJobClient, obj *v1.GitJob, handler func(obj *v1.GitJob) (*v1.GitJob, error)) (*v1.GitJob, error) {
	if obj == nil {
		return obj, nil
	}

	copyObj := obj.DeepCopy()
	newObj, err := handler(copyObj)
	if newObj != nil {
		copyObj = newObj
	}
	if obj.ResourceVersion == copyObj.ResourceVersion && !equality.Semantic.DeepEqual(obj, copyObj) {
		return client.Update(copyObj)
	}

	return copyObj, err
}

func (c *gitJobController) AddGenericHandler(ctx context.Context, name string, handler generic.Handler) {
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, handler)
}

func (c *gitJobController) AddGenericRemoveHandler(ctx context.Context, name string, handler generic.Handler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), handler)
	c.controllerManager.AddHandler(ctx, c.gvk, c.informer.Informer(), name, removeHandler)
}

func (c *gitJobController) OnChange(ctx context.Context, name string, sync GitJobHandler) {
	c.AddGenericHandler(ctx, name, FromGitJobHandlerToHandler(sync))
}

func (c *gitJobController) OnRemove(ctx context.Context, name string, sync GitJobHandler) {
	removeHandler := generic.NewRemoveHandler(name, c.Updater(), FromGitJobHandlerToHandler(sync))
	c.AddGenericHandler(ctx, name, removeHandler)
}

func (c *gitJobController) Enqueue(namespace, name string) {
	c.controllerManager.Enqueue(c.gvk, c.informer.Informer(), namespace, name)
}

func (c *gitJobController) EnqueueAfter(namespace, name string, duration time.Duration) {
	c.controllerManager.EnqueueAfter(c.gvk, c.informer.Informer(), namespace, name, duration)
}

func (c *gitJobController) Informer() cache.SharedIndexInformer {
	return c.informer.Informer()
}

func (c *gitJobController) GroupVersionKind() schema.GroupVersionKind {
	return c.gvk
}

func (c *gitJobController) Cache() GitJobCache {
	return &gitJobCache{
		lister:  c.informer.Lister(),
		indexer: c.informer.Informer().GetIndexer(),
	}
}

func (c *gitJobController) Create(obj *v1.GitJob) (*v1.GitJob, error) {
	return c.clientGetter.GitJobs(obj.Namespace).Create(context.TODO(), obj, metav1.CreateOptions{})
}

func (c *gitJobController) Update(obj *v1.GitJob) (*v1.GitJob, error) {
	return c.clientGetter.GitJobs(obj.Namespace).Update(context.TODO(), obj, metav1.UpdateOptions{})
}

func (c *gitJobController) UpdateStatus(obj *v1.GitJob) (*v1.GitJob, error) {
	return c.clientGetter.GitJobs(obj.Namespace).UpdateStatus(context.TODO(), obj, metav1.UpdateOptions{})
}

func (c *gitJobController) Delete(namespace, name string, options *metav1.DeleteOptions) error {
	if options == nil {
		options = &metav1.DeleteOptions{}
	}
	return c.clientGetter.GitJobs(namespace).Delete(context.TODO(), name, *options)
}

func (c *gitJobController) Get(namespace, name string, options metav1.GetOptions) (*v1.GitJob, error) {
	return c.clientGetter.GitJobs(namespace).Get(context.TODO(), name, options)
}

func (c *gitJobController) List(namespace string, opts metav1.ListOptions) (*v1.GitJobList, error) {
	return c.clientGetter.GitJobs(namespace).List(context.TODO(), opts)
}

func (c *gitJobController) Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error) {
	return c.clientGetter.GitJobs(namespace).Watch(context.TODO(), opts)
}

func (c *gitJobController) Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.GitJob, err error) {
	return c.clientGetter.GitJobs(namespace).Patch(context.TODO(), name, pt, data, metav1.PatchOptions{}, subresources...)
}

type gitJobCache struct {
	lister  listers.GitJobLister
	indexer cache.Indexer
}

func (c *gitJobCache) Get(namespace, name string) (*v1.GitJob, error) {
	return c.lister.GitJobs(namespace).Get(name)
}

func (c *gitJobCache) List(namespace string, selector labels.Selector) ([]*v1.GitJob, error) {
	return c.lister.GitJobs(namespace).List(selector)
}

func (c *gitJobCache) AddIndexer(indexName string, indexer GitJobIndexer) {
	utilruntime.Must(c.indexer.AddIndexers(map[string]cache.IndexFunc{
		indexName: func(obj interface{}) (strings []string, e error) {
			return indexer(obj.(*v1.GitJob))
		},
	}))
}

func (c *gitJobCache) GetByIndex(indexName, key string) (result []*v1.GitJob, err error) {
	objs, err := c.indexer.ByIndex(indexName, key)
	if err != nil {
		return nil, err
	}
	result = make([]*v1.GitJob, 0, len(objs))
	for _, obj := range objs {
		result = append(result, obj.(*v1.GitJob))
	}
	return result, nil
}

type GitJobStatusHandler func(obj *v1.GitJob, status v1.GitJobStatus) (v1.GitJobStatus, error)

type GitJobGeneratingHandler func(obj *v1.GitJob, status v1.GitJobStatus) ([]runtime.Object, v1.GitJobStatus, error)

func RegisterGitJobStatusHandler(ctx context.Context, controller GitJobController, condition condition.Cond, name string, handler GitJobStatusHandler) {
	statusHandler := &gitJobStatusHandler{
		client:    controller,
		condition: condition,
		handler:   handler,
	}
	controller.AddGenericHandler(ctx, name, FromGitJobHandlerToHandler(statusHandler.sync))
}

func RegisterGitJobGeneratingHandler(ctx context.Context, controller GitJobController, apply apply.Apply,
	condition condition.Cond, name string, handler GitJobGeneratingHandler, opts *generic.GeneratingHandlerOptions) {
	statusHandler := &gitJobGeneratingHandler{
		GitJobGeneratingHandler: handler,
		apply:                   apply,
		name:                    name,
		gvk:                     controller.GroupVersionKind(),
	}
	if opts != nil {
		statusHandler.opts = *opts
	}
	controller.OnChange(ctx, name, statusHandler.Remove)
	RegisterGitJobStatusHandler(ctx, controller, condition, name, statusHandler.Handle)
}

type gitJobStatusHandler struct {
	client    GitJobClient
	condition condition.Cond
	handler   GitJobStatusHandler
}

func (a *gitJobStatusHandler) sync(key string, obj *v1.GitJob) (*v1.GitJob, error) {
	if obj == nil {
		return obj, nil
	}

	origStatus := obj.Status.DeepCopy()
	obj = obj.DeepCopy()
	newStatus, err := a.handler(obj, obj.Status)
	if err != nil {
		// Revert to old status on error
		newStatus = *origStatus.DeepCopy()
	}

	if a.condition != "" {
		if errors.IsConflict(err) {
			a.condition.SetError(&newStatus, "", nil)
		} else {
			a.condition.SetError(&newStatus, "", err)
		}
	}
	if !equality.Semantic.DeepEqual(origStatus, &newStatus) {
		var newErr error
		obj.Status = newStatus
		obj, newErr = a.client.UpdateStatus(obj)
		if err == nil {
			err = newErr
		}
	}
	return obj, err
}

type gitJobGeneratingHandler struct {
	GitJobGeneratingHandler
	apply apply.Apply
	opts  generic.GeneratingHandlerOptions
	gvk   schema.GroupVersionKind
	name  string
}

func (a *gitJobGeneratingHandler) Remove(key string, obj *v1.GitJob) (*v1.GitJob, error) {
	if obj != nil {
		return obj, nil
	}

	obj = &v1.GitJob{}
	obj.Namespace, obj.Name = kv.RSplit(key, "/")
	obj.SetGroupVersionKind(a.gvk)

	return nil, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects()
}

func (a *gitJobGeneratingHandler) Handle(obj *v1.GitJob, status v1.GitJobStatus) (v1.GitJobStatus, error) {
	objs, newStatus, err := a.GitJobGeneratingHandler(obj, status)
	if err != nil {
		return newStatus, err
	}

	return newStatus, generic.ConfigureApplyForObject(a.apply, obj, &a.opts).
		WithOwner(obj).
		WithSetID(a.name).
		ApplyObjects(objs...)
}
