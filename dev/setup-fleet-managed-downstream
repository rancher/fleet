#!/bin/bash
# Description: setup managed fleet agent in the downstream cluster (manager initiated registration)

set -euxo pipefail

if [ ! -d ./charts/fleet ]; then
  echo "please change the current directory to the fleet repo checkout"
  exit 1
fi

for cluster in $(k3d cluster list -o json | jq -r '.[].name | select(. | contains("downstream"))'); do
    # fetching from local kubeconfig
    host=$( docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' k3d-$cluster-server-0 )
    ca=$( kubectl config view --flatten -o jsonpath="{.clusters[?(@.name == \"k3d-$cluster\")].cluster.certificate-authority-data}" )
    client_cert=$( kubectl config view --flatten -o jsonpath="{.users[?(@.name == \"admin@k3d-$cluster\")].user.client-certificate-data}" )
    token=$( kubectl config view --flatten -o jsonpath="{.users[?(@.name == \"admin@k3d-$cluster\")].user.client-key-data}" )
    server="https://$host:6443"

    value=$(cat <<EOF
apiVersion: v1
kind: Config
current-context: default
clusters:
- cluster:
    certificate-authority-data: $ca
    server: $server
  name: cluster
contexts:
- context:
    cluster: cluster
    user: user
  name: default
preferences: {}
users:
- name: user
  user:
    client-certificate-data: $client_cert
    client-key-data: $token
EOF
    )
    kubectl create ns fleet-default || true
    kubectl delete secret -n fleet-default kbcfg-$cluster || true
    kubectl create secret generic -n fleet-default kbcfg-$cluster --from-literal=value="$value"

    kubectl apply -n fleet-default -f - <<EOF
apiVersion: "fleet.cattle.io/v1alpha1"
kind: Cluster
metadata:
  name: $cluster
  namespace: fleet-default
  labels:
    name: $cluster
spec:
  kubeConfigSecret: kbcfg-$cluster
EOF

done
