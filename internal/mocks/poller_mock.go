// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rancher/fleet/internal/cmd/gitjob (interfaces: GitPoller)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=../../mocks/poller_mock.go -package=mocks github.com/rancher/fleet/internal/cmd/gitjob GitPoller
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/rancher/fleet/pkg/apis/fleet.cattle.io/v1alpha1"
	gomock "go.uber.org/mock/gomock"
)

// MockGitPoller is a mock of GitPoller interface.
type MockGitPoller struct {
	ctrl     *gomock.Controller
	recorder *MockGitPollerMockRecorder
}

// MockGitPollerMockRecorder is the mock recorder for MockGitPoller.
type MockGitPollerMockRecorder struct {
	mock *MockGitPoller
}

// NewMockGitPoller creates a new mock instance.
func NewMockGitPoller(ctrl *gomock.Controller) *MockGitPoller {
	mock := &MockGitPoller{ctrl: ctrl}
	mock.recorder = &MockGitPollerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitPoller) EXPECT() *MockGitPollerMockRecorder {
	return m.recorder
}

// AddOrModifyGitRepoPollJob mocks base method.
func (m *MockGitPoller) AddOrModifyGitRepoPollJob(arg0 context.Context, arg1 v1alpha1.GitRepo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddOrModifyGitRepoPollJob", arg0, arg1)
}

// AddOrModifyGitRepoPollJob indicates an expected call of AddOrModifyGitRepoPollJob.
func (mr *MockGitPollerMockRecorder) AddOrModifyGitRepoPollJob(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrModifyGitRepoPollJob", reflect.TypeOf((*MockGitPoller)(nil).AddOrModifyGitRepoPollJob), arg0, arg1)
}

// CleanUpGitRepoPollJobs mocks base method.
func (m *MockGitPoller) CleanUpGitRepoPollJobs(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CleanUpGitRepoPollJobs", arg0)
}

// CleanUpGitRepoPollJobs indicates an expected call of CleanUpGitRepoPollJobs.
func (mr *MockGitPollerMockRecorder) CleanUpGitRepoPollJobs(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanUpGitRepoPollJobs", reflect.TypeOf((*MockGitPoller)(nil).CleanUpGitRepoPollJobs), arg0)
}
