// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/generated/controllers/fleet.cattle.io/v1alpha1/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1alpha1 "github.com/rancher/fleet/pkg/generated/controllers/fleet.cattle.io/v1alpha1"
)

// FleetInterface is a mock of Interface interface.
type FleetInterface struct {
	ctrl     *gomock.Controller
	recorder *FleetInterfaceMockRecorder
}

// FleetInterfaceMockRecorder is the mock recorder for FleetInterface.
type FleetInterfaceMockRecorder struct {
	mock *FleetInterface
}

// NewFleetInterface creates a new mock instance.
func NewFleetInterface(ctrl *gomock.Controller) *FleetInterface {
	mock := &FleetInterface{ctrl: ctrl}
	mock.recorder = &FleetInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *FleetInterface) EXPECT() *FleetInterfaceMockRecorder {
	return m.recorder
}

// Bundle mocks base method.
func (m *FleetInterface) Bundle() v1alpha1.BundleController {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bundle")
	ret0, _ := ret[0].(v1alpha1.BundleController)
	return ret0
}

// Bundle indicates an expected call of Bundle.
func (mr *FleetInterfaceMockRecorder) Bundle() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bundle", reflect.TypeOf((*FleetInterface)(nil).Bundle))
}

// BundleDeployment mocks base method.
func (m *FleetInterface) BundleDeployment() v1alpha1.BundleDeploymentController {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BundleDeployment")
	ret0, _ := ret[0].(v1alpha1.BundleDeploymentController)
	return ret0
}

// BundleDeployment indicates an expected call of BundleDeployment.
func (mr *FleetInterfaceMockRecorder) BundleDeployment() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BundleDeployment", reflect.TypeOf((*FleetInterface)(nil).BundleDeployment))
}

// BundleNamespaceMapping mocks base method.
func (m *FleetInterface) BundleNamespaceMapping() v1alpha1.BundleNamespaceMappingController {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BundleNamespaceMapping")
	ret0, _ := ret[0].(v1alpha1.BundleNamespaceMappingController)
	return ret0
}

// BundleNamespaceMapping indicates an expected call of BundleNamespaceMapping.
func (mr *FleetInterfaceMockRecorder) BundleNamespaceMapping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BundleNamespaceMapping", reflect.TypeOf((*FleetInterface)(nil).BundleNamespaceMapping))
}

// Cluster mocks base method.
func (m *FleetInterface) Cluster() v1alpha1.ClusterController {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cluster")
	ret0, _ := ret[0].(v1alpha1.ClusterController)
	return ret0
}

// Cluster indicates an expected call of Cluster.
func (mr *FleetInterfaceMockRecorder) Cluster() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cluster", reflect.TypeOf((*FleetInterface)(nil).Cluster))
}

// ClusterGroup mocks base method.
func (m *FleetInterface) ClusterGroup() v1alpha1.ClusterGroupController {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterGroup")
	ret0, _ := ret[0].(v1alpha1.ClusterGroupController)
	return ret0
}

// ClusterGroup indicates an expected call of ClusterGroup.
func (mr *FleetInterfaceMockRecorder) ClusterGroup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterGroup", reflect.TypeOf((*FleetInterface)(nil).ClusterGroup))
}

// ClusterRegistration mocks base method.
func (m *FleetInterface) ClusterRegistration() v1alpha1.ClusterRegistrationController {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterRegistration")
	ret0, _ := ret[0].(v1alpha1.ClusterRegistrationController)
	return ret0
}

// ClusterRegistration indicates an expected call of ClusterRegistration.
func (mr *FleetInterfaceMockRecorder) ClusterRegistration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterRegistration", reflect.TypeOf((*FleetInterface)(nil).ClusterRegistration))
}

// ClusterRegistrationToken mocks base method.
func (m *FleetInterface) ClusterRegistrationToken() v1alpha1.ClusterRegistrationTokenController {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterRegistrationToken")
	ret0, _ := ret[0].(v1alpha1.ClusterRegistrationTokenController)
	return ret0
}

// ClusterRegistrationToken indicates an expected call of ClusterRegistrationToken.
func (mr *FleetInterfaceMockRecorder) ClusterRegistrationToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterRegistrationToken", reflect.TypeOf((*FleetInterface)(nil).ClusterRegistrationToken))
}

// Content mocks base method.
func (m *FleetInterface) Content() v1alpha1.ContentController {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Content")
	ret0, _ := ret[0].(v1alpha1.ContentController)
	return ret0
}

// Content indicates an expected call of Content.
func (mr *FleetInterfaceMockRecorder) Content() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Content", reflect.TypeOf((*FleetInterface)(nil).Content))
}

// HelmOp mocks base method.
func (m *FleetInterface) HelmOp() v1alpha1.HelmOpController {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HelmOp")
	ret0, _ := ret[0].(v1alpha1.HelmOpController)
	return ret0
}

// HelmOp indicates an expected call of HelmOp.
func (mr *FleetInterfaceMockRecorder) HelmOp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HelmOp", reflect.TypeOf((*FleetInterface)(nil).HelmOp))
}

// GitRepo mocks base method.
func (m *FleetInterface) GitRepo() v1alpha1.GitRepoController {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GitRepo")
	ret0, _ := ret[0].(v1alpha1.GitRepoController)
	return ret0
}

// GitRepo indicates an expected call of GitRepo.
func (mr *FleetInterfaceMockRecorder) GitRepo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GitRepo", reflect.TypeOf((*FleetInterface)(nil).GitRepo))
}

// GitRepoRestriction mocks base method.
func (m *FleetInterface) GitRepoRestriction() v1alpha1.GitRepoRestrictionController {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GitRepoRestriction")
	ret0, _ := ret[0].(v1alpha1.GitRepoRestrictionController)
	return ret0
}

// GitRepoRestriction indicates an expected call of GitRepoRestriction.
func (mr *FleetInterfaceMockRecorder) GitRepoRestriction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GitRepoRestriction", reflect.TypeOf((*FleetInterface)(nil).GitRepoRestriction))
}

// ImageScan mocks base method.
func (m *FleetInterface) ImageScan() v1alpha1.ImageScanController {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImageScan")
	ret0, _ := ret[0].(v1alpha1.ImageScanController)
	return ret0
}

// ImageScan indicates an expected call of ImageScan.
func (mr *FleetInterfaceMockRecorder) ImageScan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImageScan", reflect.TypeOf((*FleetInterface)(nil).ImageScan))
}
