// Code generated by MockGen. DO NOT EDIT.
// Source: oras.land/oras-go/v2/registry/remote (interfaces: Client)
//
// Generated by this command:
//
//	mockgen -package mocks -mock_names Client=MockOCIClient oras.land/oras-go/v2/registry/remote Client
//

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOCIClient is a mock of Client interface.
type MockOCIClient struct {
	ctrl     *gomock.Controller
	recorder *MockOCIClientMockRecorder
}

// MockOCIClientMockRecorder is the mock recorder for MockOCIClient.
type MockOCIClientMockRecorder struct {
	mock *MockOCIClient
}

// NewMockOCIClient creates a new mock instance.
func NewMockOCIClient(ctrl *gomock.Controller) *MockOCIClient {
	mock := &MockOCIClient{ctrl: ctrl}
	mock.recorder = &MockOCIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOCIClient) EXPECT() *MockOCIClientMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockOCIClient) Do(arg0 *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockOCIClientMockRecorder) Do(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockOCIClient)(nil).Do), arg0)
}
