name: E2E Fleet

on:
  schedule:
    # Run everyday day at 7:00 AM
    - cron: '0 7 * * *'
  workflow_dispatch:
    inputs:
      enable_tmate:
        description: 'Enable debugging via tmate'
        required: false
        default: "false"
  pull_request:
    paths-ignore:
      - 'docs/**'
      - 'scripts/**'
      - '*.md'

env:
  GOARCH: amd64
  CGO_ENABLED: 0
  SETUP_GO_VERSION: '^1.18'

jobs:
  e2e-fleet-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        k3s_version:
          # k3d version list k3s | sed 's/+/-/' | sort -h
          #- v1.24.1-k3s1
          - v1.22.10-k3s1
          - v1.20.15-k3s1
    steps:
      -
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      -
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.SETUP_GO_VERSION }}
      -
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      -
        name: Install Ginkgo CLI
        run: go install github.com/onsi/ginkgo/v2/ginkgo@v2.1
      -
        name: Build Fleet Binaries
        run: |
          go build -o bin/fleetcontroller-linux-$GOARCH ./cmd/fleetcontroller

          go build -o "bin/fleet-linux-$GOARCH"
          go build -o "bin/fleetagent-linux-$GOARCH" ./cmd/fleetagent
      -
        name: Build Docker Images
        run: |
          docker build -f package/Dockerfile -t rancher/fleet:dev --build-arg="ARCH=$GOARCH" .
          docker build -f package/Dockerfile.agent -t rancher/fleet-agent:dev --build-arg="ARCH=$GOARCH" .
      -
        name: Provision k3d Cluster
        uses: AbsaOSS/k3d-action@v2
        # k3d will automatically create a network named k3d-test-cluster-1 with the range 172.18.0.0/16
        with:
          cluster-name: "k3s-default"
          args: >-
            --agents 3
            --network "nw01"
            --image docker.io/rancher/k3s:${{matrix.k3s_version}}
      -
        name: Import Images Into k3d
        run: |
          k3d image import rancher/fleet:dev rancher/fleet-agent:dev
      -
        name: Set Up Tmate Debug Session
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.enable_tmate == 'true' }}
        uses: mxschmitt/action-tmate@v3
        timeout-minutes: 15
        with:
          limit-access-to-actor: true
      -
        name: Deploy Fleet
        run: |
          helm -n fleet-system install --create-namespace --wait fleet-crd charts/fleet-crd
          helm -n fleet-system upgrade --install --create-namespace --wait fleet charts/fleet
          kubectl -n fleet-system rollout status deploy/fleet-controller
          { grep -q -m 1 "fleet-agent"; kill $!; } < <(kubectl get deployment -n fleet-system -w)
          kubectl -n fleet-system rollout status deploy/fleet-agent
      -
        name: E2E Tests for Examples
        env:
          FLEET_E2E_NS: fleet-local
        run: |
          ginkgo e2e/single-cluster
      -
        name: Dump Failed Environment
        if: failure()
        run: |
          mkdir -p tmp
          kubectl get -A pod,secret,service,ingress -o json > tmp/cluster.json
          kubectl get -A gitrepos,clusters,clustergroups,bundles,bundledeployments -o json > tmp/fleet.json
          kubectl get -A events > tmp/events.log
          helm list -A > tmp/helm.log
          kubectl logs -n fleet-system -l app=fleet-controller > tmp/fleetcontroller.log
          kubectl logs -n fleet-system -l app=fleet-agent > tmp/fleetagent.log

          docker logs k3d-k3s-default-server-0 &> tmp/k3s.log
          docker exec k3d-k3s-default-server-0 sh -c 'cd /var/log/containers; grep -r "." .' > tmp/containers.log
      -
        name: Upload Logs
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: gha-fleet-e2e-logs-${{ github.sha }}-${{ matrix.k3s_version }}-${{ github.run_id }}
          path: |
            tmp/*.json
            tmp/*.log
          retention-days: 2
