/*
Copyright (c) 2020 - 2023 SUSE LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by main. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	v1alpha1 "github.com/rancher/fleet/pkg/apis/fleet.cattle.io/v1alpha1"
	"github.com/rancher/wrangler/pkg/generic"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/apimachinery/pkg/types"
	"k8s.io/apimachinery/pkg/watch"
)

// GitRepoRestrictionController interface for managing GitRepoRestriction resources.
type GitRepoRestrictionController interface {
	generic.ControllerMeta
	GitRepoRestrictionClient

	// OnChange runs the given handler when the controller detects a resource was changed.
	OnChange(ctx context.Context, name string, sync GitRepoRestrictionHandler)

	// OnRemove runs the given handler when the controller detects a resource was changed.
	OnRemove(ctx context.Context, name string, sync GitRepoRestrictionHandler)

	// Enqueue adds the resource with the given name to the worker queue of the controller.
	Enqueue(namespace, name string)

	// EnqueueAfter runs Enqueue after the provided duration.
	EnqueueAfter(namespace, name string, duration time.Duration)

	// Cache returns a cache for the resource type T.
	Cache() GitRepoRestrictionCache
}

// GitRepoRestrictionClient interface for managing GitRepoRestriction resources in Kubernetes.
type GitRepoRestrictionClient interface {
	// Create creates a new object and return the newly created Object or an error.
	Create(*v1alpha1.GitRepoRestriction) (*v1alpha1.GitRepoRestriction, error)

	// Update updates the object and return the newly updated Object or an error.
	Update(*v1alpha1.GitRepoRestriction) (*v1alpha1.GitRepoRestriction, error)

	// Delete deletes the Object in the given name.
	Delete(namespace, name string, options *metav1.DeleteOptions) error

	// Get will attempt to retrieve the resource with the specified name.
	Get(namespace, name string, options metav1.GetOptions) (*v1alpha1.GitRepoRestriction, error)

	// List will attempt to find multiple resources.
	List(namespace string, opts metav1.ListOptions) (*v1alpha1.GitRepoRestrictionList, error)

	// Watch will start watching resources.
	Watch(namespace string, opts metav1.ListOptions) (watch.Interface, error)

	// Patch will patch the resource with the matching name.
	Patch(namespace, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.GitRepoRestriction, err error)
}

// GitRepoRestrictionCache interface for retrieving GitRepoRestriction resources in memory.
type GitRepoRestrictionCache interface {
	// Get returns the resources with the specified name from the cache.
	Get(namespace, name string) (*v1alpha1.GitRepoRestriction, error)

	// List will attempt to find resources from the Cache.
	List(namespace string, selector labels.Selector) ([]*v1alpha1.GitRepoRestriction, error)

	// AddIndexer adds  a new Indexer to the cache with the provided name.
	// If you call this after you already have data in the store, the results are undefined.
	AddIndexer(indexName string, indexer GitRepoRestrictionIndexer)

	// GetByIndex returns the stored objects whose set of indexed values
	// for the named index includes the given indexed value.
	GetByIndex(indexName, key string) ([]*v1alpha1.GitRepoRestriction, error)
}

// GitRepoRestrictionHandler is function for performing any potential modifications to a GitRepoRestriction resource.
type GitRepoRestrictionHandler func(string, *v1alpha1.GitRepoRestriction) (*v1alpha1.GitRepoRestriction, error)

// GitRepoRestrictionIndexer computes a set of indexed values for the provided object.
type GitRepoRestrictionIndexer func(obj *v1alpha1.GitRepoRestriction) ([]string, error)

// GitRepoRestrictionGenericController wraps wrangler/pkg/generic.Controller so that the function definitions adhere to GitRepoRestrictionController interface.
type GitRepoRestrictionGenericController struct {
	generic.ControllerInterface[*v1alpha1.GitRepoRestriction, *v1alpha1.GitRepoRestrictionList]
}

// OnChange runs the given resource handler when the controller detects a resource was changed.
func (c *GitRepoRestrictionGenericController) OnChange(ctx context.Context, name string, sync GitRepoRestrictionHandler) {
	c.ControllerInterface.OnChange(ctx, name, generic.ObjectHandler[*v1alpha1.GitRepoRestriction](sync))
}

// OnRemove runs the given object handler when the controller detects a resource was changed.
func (c *GitRepoRestrictionGenericController) OnRemove(ctx context.Context, name string, sync GitRepoRestrictionHandler) {
	c.ControllerInterface.OnRemove(ctx, name, generic.ObjectHandler[*v1alpha1.GitRepoRestriction](sync))
}

// Cache returns a cache of resources in memory.
func (c *GitRepoRestrictionGenericController) Cache() GitRepoRestrictionCache {
	return &GitRepoRestrictionGenericCache{
		c.ControllerInterface.Cache(),
	}
}

// GitRepoRestrictionGenericCache wraps wrangler/pkg/generic.Cache so the function definitions adhere to GitRepoRestrictionCache interface.
type GitRepoRestrictionGenericCache struct {
	generic.CacheInterface[*v1alpha1.GitRepoRestriction]
}

// AddIndexer adds  a new Indexer to the cache with the provided name.
// If you call this after you already have data in the store, the results are undefined.
func (c GitRepoRestrictionGenericCache) AddIndexer(indexName string, indexer GitRepoRestrictionIndexer) {
	c.CacheInterface.AddIndexer(indexName, generic.Indexer[*v1alpha1.GitRepoRestriction](indexer))
}
