// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rancher/fleet/pkg/git/poll (interfaces: Watcher)
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -destination=../mocks/watch_mock.go -package=mocks github.com/rancher/fleet/pkg/git/poll Watcher
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/rancher/fleet/pkg/apis/fleet.cattle.io/v1alpha1"
	gomock "go.uber.org/mock/gomock"
)

// MockWatcher is a mock of Watcher interface.
type MockWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockWatcherMockRecorder
}

// MockWatcherMockRecorder is the mock recorder for MockWatcher.
type MockWatcherMockRecorder struct {
	mock *MockWatcher
}

// NewMockWatcher creates a new mock instance.
func NewMockWatcher(ctrl *gomock.Controller) *MockWatcher {
	mock := &MockWatcher{ctrl: ctrl}
	mock.recorder = &MockWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatcher) EXPECT() *MockWatcherMockRecorder {
	return m.recorder
}

// Finish mocks base method.
func (m *MockWatcher) Finish() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Finish")
}

// Finish indicates an expected call of Finish.
func (mr *MockWatcherMockRecorder) Finish() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finish", reflect.TypeOf((*MockWatcher)(nil).Finish))
}

// GetSyncInterval mocks base method.
func (m *MockWatcher) GetSyncInterval() float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSyncInterval")
	ret0, _ := ret[0].(float64)
	return ret0
}

// GetSyncInterval indicates an expected call of GetSyncInterval.
func (mr *MockWatcherMockRecorder) GetSyncInterval() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyncInterval", reflect.TypeOf((*MockWatcher)(nil).GetSyncInterval))
}

// Restart mocks base method.
func (m *MockWatcher) Restart(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Restart", arg0)
}

// Restart indicates an expected call of Restart.
func (mr *MockWatcherMockRecorder) Restart(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restart", reflect.TypeOf((*MockWatcher)(nil).Restart), arg0)
}

// StartBackgroundSync mocks base method.
func (m *MockWatcher) StartBackgroundSync(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartBackgroundSync", arg0)
}

// StartBackgroundSync indicates an expected call of StartBackgroundSync.
func (mr *MockWatcherMockRecorder) StartBackgroundSync(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBackgroundSync", reflect.TypeOf((*MockWatcher)(nil).StartBackgroundSync), arg0)
}

// UpdateGitRepo mocks base method.
func (m *MockWatcher) UpdateGitRepo(arg0 v1alpha1.GitRepo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateGitRepo", arg0)
}

// UpdateGitRepo indicates an expected call of UpdateGitRepo.
func (mr *MockWatcherMockRecorder) UpdateGitRepo(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGitRepo", reflect.TypeOf((*MockWatcher)(nil).UpdateGitRepo), arg0)
}
