// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rancher/gitjob/pkg/git/poll (interfaces: Watcher)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/rancher/gitjob/pkg/apis/gitjob.cattle.io/v1"
)

// MockWatcher is a mock of Watcher interface.
type MockWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockWatcherMockRecorder
}

// MockWatcherMockRecorder is the mock recorder for MockWatcher.
type MockWatcherMockRecorder struct {
	mock *MockWatcher
}

// NewMockWatcher creates a new mock instance.
func NewMockWatcher(ctrl *gomock.Controller) *MockWatcher {
	mock := &MockWatcher{ctrl: ctrl}
	mock.recorder = &MockWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatcher) EXPECT() *MockWatcherMockRecorder {
	return m.recorder
}

// Finish mocks base method.
func (m *MockWatcher) Finish() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Finish")
}

// Finish indicates an expected call of Finish.
func (mr *MockWatcherMockRecorder) Finish() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finish", reflect.TypeOf((*MockWatcher)(nil).Finish))
}

// GetSyncInterval mocks base method.
func (m *MockWatcher) GetSyncInterval() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSyncInterval")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetSyncInterval indicates an expected call of GetSyncInterval.
func (mr *MockWatcherMockRecorder) GetSyncInterval() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyncInterval", reflect.TypeOf((*MockWatcher)(nil).GetSyncInterval))
}

// Restart mocks base method.
func (m *MockWatcher) Restart(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Restart", arg0)
}

// Restart indicates an expected call of Restart.
func (mr *MockWatcherMockRecorder) Restart(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Restart", reflect.TypeOf((*MockWatcher)(nil).Restart), arg0)
}

// StartBackgroundSync mocks base method.
func (m *MockWatcher) StartBackgroundSync(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartBackgroundSync", arg0)
}

// StartBackgroundSync indicates an expected call of StartBackgroundSync.
func (mr *MockWatcherMockRecorder) StartBackgroundSync(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBackgroundSync", reflect.TypeOf((*MockWatcher)(nil).StartBackgroundSync), arg0)
}

// UpdateGitJob mocks base method.
func (m *MockWatcher) UpdateGitJob(arg0 v1.GitJob) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateGitJob", arg0)
}

// UpdateGitJob indicates an expected call of UpdateGitJob.
func (mr *MockWatcherMockRecorder) UpdateGitJob(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGitJob", reflect.TypeOf((*MockWatcher)(nil).UpdateGitJob), arg0)
}
